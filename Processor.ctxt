#BlueJ class context
comment0.target=Processor
comment1.params=toOverwrite\ overwriteWith
comment1.target=void\ overwriteImage(java.awt.image.BufferedImage,\ java.awt.image.BufferedImage)
comment10.params=bi
comment10.target=void\ rotateCCW(java.awt.image.BufferedImage)
comment10.text=\r\n\ Rotates\ the\ bufferedimage\ counter-clockwise\ by\ swapping\ (x,y)\ to\ (y,-x)\r\n\ @param\ bi\ The\ source\ image\ to\ change\r\n
comment11.params=bi
comment11.target=void\ rotateCW(java.awt.image.BufferedImage)
comment11.text=\r\n\ Rotates\ the\ bufferedimage\ clockwise\ by\ swapping\ (x,y)\ to\ (-y,x)\ \r\n\ @param\ bi\ The\ source\ image\ to\ change\r\n
comment12.params=bi
comment12.target=void\ blueify(java.awt.image.BufferedImage)
comment12.text=\r\n\ Example\ colour\ altering\ method\ by\ Mr.\ Cohen.\ This\ method\ will\r\n\ increase\ the\ blue\ value\ while\ reducing\ the\ red\ and\ green\ values.\r\n\ \r\n\ Demonstrates\ use\ of\ packagePixel()\ and\ unpackPixel()\ methods.\r\n\ \r\n\ @param\ bi\ \ \ \ The\ BufferedImage\ (passed\ by\ reference)\ to\ change.\r\n
comment13.params=bi
comment13.target=void\ redify(java.awt.image.BufferedImage)
comment14.params=bi
comment14.target=void\ greyscale(java.awt.image.BufferedImage)
comment14.text=\r\n\ Averages\ the\ rgb\ values\ of\ every\ pixel\r\n\ @param\ bi\ The\ source\ image\ to\ change\r\n
comment15.params=bi\ newAlpha
comment15.target=void\ changeAlpha(java.awt.image.BufferedImage,\ int)
comment15.text=\r\n\ Loops\ through\ every\ pixel\ and\ changes\ its\ transparency\r\n\ \r\n\ @param\ bi\ The\ source\ image\ to\ change\r\n\ @param\ newAlpha\ an\ integer\ value\ from\ 0-255\ \r\n
comment16.params=bi
comment16.target=void\ invert(java.awt.image.BufferedImage)
comment16.text=\r\n\ inverts\ the\ color\ of\ pixels,\ high\ values\ in\ rgb\ become\ low,\ low\ becomes\ high\r\n\ @param\ bi\ The\ source\ image\ to\ change\r\n
comment17.params=bi
comment17.target=void\ flipHorizontal(java.awt.image.BufferedImage)
comment17.text=\r\n\ flips\ the\ image\ on\ the\ horizontal\ axis\r\n\ \r\n\ @param\ bi\ The\ source\ image\ to\ change\r\n
comment18.params=bi
comment18.target=void\ flipVertical(java.awt.image.BufferedImage)
comment18.text=\r\n\ flips\ the\ image\ on\ the\ vertical\ axis\r\n\ \r\n\ @param\ bi\ The\ source\ image\ to\ change\r\n
comment19.params=source
comment19.target=java.awt.image.BufferedImage\ copyImage(java.awt.image.BufferedImage)
comment19.text=\r\n\ Returns\ an\ image\ that\ points\ to\ different\ but\ identical\ image\ of\ the\ source\r\n\ @param\ source\ The\ source\ image\ to\ copy\r\n
comment2.params=a\ b
comment2.target=java.lang.Comparable\ max(java.lang.Comparable,\ java.lang.Comparable)
comment20.params=source
comment20.target=java.awt.image.BufferedImage\ removeAlpha(java.awt.image.BufferedImage)
comment20.text=\r\n\ Converts\ the\ image\ into\ one\ without\ an\ alpha\ layer\r\n
comment21.params=rgbaValue
comment21.target=int[]\ unpackPixel(int)
comment21.text=\r\n\ Takes\ in\ an\ rgb\ value\ -\ the\ kind\ that\ is\ returned\ from\ BufferedImage's\r\n\ getRGB()\ method\ -\ and\ returns\ 4\ integers\ for\ easy\ manipulation.\r\n\ \r\n\ By\ Jordan\ Cohen\r\n\ Version\ 0.2\r\n\ \r\n\ @param\ rgbaValue\ The\ value\ of\ a\ single\ pixel\ as\ an\ integer,\ representing<br>\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ 8\ bits\ for\ red,\ green\ and\ blue\ and\ 8\ bits\ for\ alpha\:<br>\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ <pre>alpha\ \ \ red\ \ \ \ \ green\ \ \ blue</pre>\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ <pre>00000000000000000000000000000000</pre>\r\n\ @return\ int[4]\ \ \ Array\ containing\ 4\ shorter\ ints<br>\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ <pre>0\ \ \ \ \ \ \ 1\ \ \ \ \ \ \ 2\ \ \ \ \ \ \ 3</pre>\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ <pre>alpha\ \ \ red\ \ \ \ \ green\ \ \ blue</pre>\r\n
comment22.params=r\ g\ b\ a
comment22.target=int\ packagePixel(int,\ int,\ int,\ int)
comment22.text=\r\n\ Takes\ in\ a\ red,\ green,\ blue\ and\ alpha\ integer\ and\ uses\ bit-shifting\r\n\ to\ package\ all\ of\ the\ data\ into\ a\ single\ integer.\r\n\ \r\n\ @param\ \ \ int\ red\ value\ (0-255)\r\n\ @param\ \ \ int\ green\ value\ (0-255)\r\n\ @param\ \ \ int\ blue\ value\ (0-255)\r\n\ @param\ \ \ int\ alpha\ value\ (0-255)\r\n\ \r\n\ @return\ int\ \ Integer\ representing\ 32\ bit\ integer\ pixel\ ready\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ for\ BufferedImage\r\n
comment3.params=value\ min\ max
comment3.target=java.lang.Comparable\ clamp(java.lang.Comparable,\ java.lang.Comparable,\ java.lang.Comparable)
comment4.params=bi
comment4.target=void\ blur(java.awt.image.BufferedImage)
comment4.text=\r\n\ Blurs\ and\ image\ using\ a\ kernal\r\n
comment5.params=bi
comment5.target=greenfoot.GreenfootImage\ bufferToGreenfoot(java.awt.image.BufferedImage)
comment5.text=\r\n\ Converts\ a\ BufferedImage\ to\ a\ GreenfootImage\r\n
comment6.params=image\ color
comment6.target=void\ colorFilter(ImageHolder,\ int)
comment6.text=\r\n\ Draws\ an\ image\ with\ a\ flat\ color\ over\ the\ base\ image\ with\ concern\ of\ position\ in\ the\ base\ image\r\n
comment7.params=image\ color
comment7.target=java.awt.image.BufferedImage\ colorFilter(java.awt.image.BufferedImage,\ int)
comment7.text=\r\n\ Draws\ an\ image\ with\ a\ flat\ color\ over\ the\ base\ image\ without\ concern\ of\ position\ in\ the\ base\ image\r\n
comment8.params=bi
comment8.target=void\ highpass(java.awt.image.BufferedImage)
comment8.text=\r\n\ Uses\ a\ Kernal\ and\ ConvolveOp\ to\ brighten\ the\ image\r\n\ @param\ bi\ The\ source\ image\ to\ change\r\n
comment9.params=bi\ psize
comment9.target=void\ pixilate(java.awt.image.BufferedImage,\ int)
comment9.text=\r\n\ Average\ the\ colors\ in\ square\ of\ pixels\ for\ the\ entire\ image\r\n\ @param\ bi\ The\ source\ image\ to\ change\r\n
numComments=23
